//------------------------------------------------------------------------------
//  shaders.shd
//  Draw voxel meshes generated by stb_voxel_render
//------------------------------------------------------------------------------

@uniform_block voxelVSParams VoxelVSParams
mat4 mvp ModelViewProjection
mat4 model Model
vec4[6] normal_table NormalTable
vec4[32] color_table ColorTable
vec3 light_dir LightDir
float light_intensity LightIntensity
vec3 scale Scale
vec3 translate Translate
vec3 tex_translate TexTranslate
@end

@code_block gamma
_func vec4 gamma(vec4 c) {
    float p = 1.0/2.2;
    return vec4(pow(c.xyz, vec3(p, p, p)), c.w);
}
@end

@vs voxel_vs
@use_uniform_block voxelVSParams
@in vec4 position
@in vec4 normal
@out vec4 facedata
@out vec3 voxelspace_pos
@out vec3 color
@out float amb_occ

    // manually extract position and normal into range 0..255
    vec4 p = position * 255.0;
    vec4 n = normal * 255.0;

    facedata = n.xyzw;

    vec3 offset = p.xzy;
    amb_occ  = p.w / 63.0;

    voxelspace_pos = offset * scale.xzy;

    int normal_index = int(mod(n.w / 4.0, 6.0));
    vec3 face_normal = mul(model, normal_table[normal_index]).xzy;
    float l = clamp(dot(face_normal, light_dir), 0.0, 1.0) + 0.4;
    int color_index = int(mod(facedata.z, 32.0));
    color = color_table[color_index].xyz * l * light_intensity;

    vec4 wp = vec4(voxelspace_pos + translate.xzy, 1.0);
    _position = mul(mvp, wp);
@end

@fs voxel_fs
@use_code_block gamma
@in vec4 facedata
@in vec3 voxelspace_pos
@in vec3 color
@in float amb_occ
    vec3 c = color * (amb_occ * amb_occ);
    _color = gamma(vec4(c, 1.0));
@end

@program VoxelShader voxel_vs voxel_fs

//------------------------------------------------------------------------------
@uniform_block kcVSParams KCVSParams
mat4 mvp ModelViewProjection
@end

@texture_block kcTextures KCTextures
sampler2D irm IRM
@end

@vs kc_vs
@use_uniform_block kcVSParams
@in vec4 position
@in vec2 texcoord0
@out vec2 uv
    _position = mul(mvp, position);
    uv = texcoord0;
@end

@fs kc_fs
@use_texture_block kcTextures
@use_code_block gamma
@in vec2 uv
{
    _color = gamma(tex2D(irm, uv));
}
@end

@program KCShader kc_vs kc_fs

//------------------------------------------------------------------------------
@uniform_block kcDbgVSParams KCDBGVSParams
mat4 mvp ModelViewProjection
vec4 color Color
@end

@vs dbg_vs
@use_uniform_block kcDbgVSParams
@in vec4 position
@out vec4 dbgColor
    _position = mul(mvp, position);
    dbgColor = color;
@end

@fs dbg_fs
@in vec4 dbgColor
{
    _color = dbgColor;
}
@end

@program DbgShader dbg_vs dbg_fs
