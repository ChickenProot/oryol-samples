//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for MeshViewer sample
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  common utility functions
//
@code_block Util
vec4 gamma(vec4 c) {
    float p = 1.0/2.2;
    return vec4(pow(c.xyz, vec3(p, p, p)), c.w);
}
@end

//------------------------------------------------------------------------------
//  normal visualization shader
//
@vs normalsVS
uniform vsParams {
    mat4 mvp;
};
in vec4 position;
in vec4 normal;
out vec4 nrm;
void main() {
    gl_Position = mvp * position;
    nrm = normal;
}
@end

@fs normalsFS
in vec4 nrm;
out vec4 fragColor;
void main() {
    fragColor = nrm * 0.5 + 0.5;
}
@end

@program NormalsShader normalsVS normalsFS

//------------------------------------------------------------------------------
//  lambert shader
//
@vs lambertVS
uniform vsParams {
    mat4 mvp;
    mat4 model;
};
in vec4 position;
in vec3 normal;
out vec3 N;
void main() {
    gl_Position = mvp * position;
    N = (model * vec4(normal, 0.0)).xyz;
}
@end

@fs lambertFS
@use_code_block Util
uniform fsParams {
    vec3 lightDir;
    vec4 lightColor;
    vec4 matDiffuse;
    float gammaCorrect;
};
in vec3 N;
out vec4 fragColor;

void main() {
    vec3 l = lightDir;
    vec3 n = normalize(N);
    float n_dot_l = max(dot(n, l), 0.0);
    vec4 col = vec4(lightColor.xyz * matDiffuse.xyz * n_dot_l, 1.0);
    fragColor = mix(col, gamma(col), gammaCorrect);
}
@end

@program LambertShader lambertVS lambertFS

//------------------------------------------------------------------------------
//  phong shader
//
@vs phongVS
uniform vsParams {
    mat4 mvp;
    mat4 model;
};

in vec4 position;
in vec4 normal;
out vec3 N;
out vec3 P;

void main() {
    gl_Position = mvp * position;
    P = (model * position).xyz;
    N = (model * vec4(normal.xyz, 0.0)).xyz;
}
@end

@fs phongFS
@use_code_block Util
uniform fsParams {
    vec3 lightDir;
    vec3 eyePos;
    vec4 lightColor;
    vec4 matDiffuse;
    vec4 matSpecular;
    float gammaCorrect;
    float matSpecularPower;
};

in vec3 N;
in vec3 P;
out vec4 fragColor;

void main() {
    vec3 l = lightDir;
    vec3 n = normalize(N);
    vec3 v = normalize(eyePos - P);
    float n_dot_l = max(dot(n, l), 0.0);
    vec3 r = reflect(-l, n);
    float r_dot_v = max(dot(r, v), 0.0);

    float diff = n_dot_l;
    float spec = pow(r_dot_v, matSpecularPower) * n_dot_l;
    vec4 col = vec4(lightColor.xyz * (matSpecular.xyz*spec + matDiffuse.xyz*diff), 1.0);
    fragColor = mix(col, gamma(col), gammaCorrect);
}
@end

@program PhongShader phongVS phongFS

