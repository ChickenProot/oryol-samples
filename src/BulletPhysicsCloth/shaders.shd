//------------------------------------------------------------------------------
//  float/rgba8 encoding/decoding so that we can use an RGBA8
//  shadow map instead of floating point render targets which might
//  not be supported everywhere
//
//  http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
//
@code_block util
_func vec4 encodeDepth(float v) {
    vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;
    enc = fract(enc);
    enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);
    return enc;
}

_func float decodeDepth(vec4 rgba) {
    return dot(rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0));
}

//------------------------------------------------------------------------------
//  perform simple shadow map lookup returns 0.0 (unlit) or 1.0 (lit)
//
_func float sampleShadow(sampler2D shadowMap, vec2 uv, float compare) {
    #if !ORYOL_GLSL
    uv.y = 1.0-uv.y;
    #endif
    float depth = decodeDepth(tex2D(shadowMap, vec2(uv.x, uv.y)));
    depth += 0.001;
    return step(compare, depth);
}

//------------------------------------------------------------------------------
//  perform percentage-closer shadow map lookup
//
_func float sampleShadowPCF(sampler2D shadowMap, vec2 uv, vec2 smSize, float compare) {
    float result = 0.0;
    for (int x=-2; x<=2; x++) {
        for (int y=-2; y<=2; y++) {
            vec2 off = vec2(x,y)/smSize;
            result += sampleShadow(shadowMap, uv+off, compare);
        }
    }
    return result / 25.0;
}

//------------------------------------------------------------------------------
//  perform gamma correction
//
_func vec4 gamma(vec4 c) {
    float p = 1.0/2.2;
    return vec4(pow(c.xyz, vec3(p, p, p)), c.w);
}
@end

//------------------------------------------------------------------------------
//  Shadowmap pass shaders
//
@uniform_block shadowVSParams ShadowVSParams
    mat4 mvp MVP
@end

@vs shadowVS
@use_uniform_block shadowVSParams
@in vec4 position
@out vec2 projZW
{
    _position = mul(mvp, position);
    projZW = _position.zw;
}
@end

@vs shadowVSInstanced
@use_uniform_block shadowVSParams
@in vec4 position
@in vec4 instance0      // instance transform xxxx
@in vec4 instance1      // instance transform yyyy
@in vec4 instance2      // instance transform zzzz
@out vec2 projZW
{
    vec4 pos = position;
    vec4 xxxx = instance0;
    vec4 yyyy = instance1;
    vec4 zzzz = instance2;
    vec4 instPos = vec4(dot(pos, xxxx), dot(pos, yyyy), dot(pos, zzzz), 1.0);
    _position = mul(mvp, instPos);
    projZW = _position.zw;
}
@end

@fs shadowFS
@highp float
@highp sampler2D
@use_code_block util
@in vec2 projZW
{
    float depth = projZW.x / projZW.y;
    _color = encodeDepth(depth);
}
@end

@program ShadowShader shadowVS shadowFS
@program ShadowShaderInstanced shadowVSInstanced shadowFS

//------------------------------------------------------------------------------
//  Color pass shaders
//
@uniform_block colorVSParams ColorVSParams
    mat4 model Model;
    mat4 mvp MVP
    mat4 lightMVP LightMVP
    vec3 diffColor DiffColor;
@end

@uniform_block colorFSParams ColorFSParams
    vec2 shadowMapSize ShadowMapSize;
    vec3 lightDir LightDir;
    vec3 eyePos EyePos;
    float specIntensity SpecIntensity;
@end

@texture_block colorTextures ColorTextures
    sampler2D shadowMap ShadowMap
@end

@vs colorVS
@use_uniform_block colorVSParams
@in vec4 position
@in vec3 normal
@out vec3 color
@out vec4 lightProjPos
@out vec3 P
@out vec3 N
{
    _position = mul(mvp, position);
    lightProjPos = mul(lightMVP, position);
    P = mul(model, position).xyz;
    N = mul(model, vec4(normal, 0.0)).xyz;
    color = diffColor;
}
@end

@vs colorVSInstanced
@use_uniform_block colorVSParams
@in vec4 position
@in vec3 normal
@in vec4 instance0      // instance transform xxxx
@in vec4 instance1      // instance transform yyyy
@in vec4 instance2      // instance transform zzzz
@in vec4 color0         // instance color
@out vec3 color
@out vec4 lightProjPos
@out vec3 P
@out vec3 N
{
    vec4 pos = position;
    vec4 nrm = vec4(normal, 0.0);
    vec4 xxxx = instance0;
    vec4 yyyy = instance1;
    vec4 zzzz = instance2;

    // instPos and instNrm are in world space, the model part of
    // ModelViewProj is usually identity when rendering instanced
    vec4 instPos = vec4(dot(pos, xxxx), dot(pos, yyyy), dot(pos, zzzz), 1.0);
    vec4 instNrm = vec4(dot(nrm, xxxx), dot(nrm, yyyy), dot(nrm, zzzz), 0.0);
    _position = mul(mvp, instPos);
    lightProjPos = mul(lightMVP, instPos);
    P = instPos.xyz;
    N = instNrm.xyz;
    color = color0.xyz * diffColor;
}
@end

@fs colorFS
@highp float
@highp sampler2D
@use_code_block util
@use_uniform_block colorFSParams
@use_texture_block colorTextures
@in vec3 color
@in vec4 lightProjPos
@in vec3 P
@in vec3 N
{
    float specPower = 16.0;
    float ambientIntensity = 0.25;

    // diffuse lighting
    vec3 l = lightDir;
    vec3 n = normalize(N);
    float n_dot_l = dot(n,l);
    if (n_dot_l > 0.0) {

        // shadow factor (0..1)
        vec3 lightPos = lightProjPos.xyz / lightProjPos.w;
        vec2 smUV = (lightPos.xy+1.0)*0.5;
        float depth = lightPos.z;
        float s = sampleShadowPCF(shadowMap, smUV, shadowMapSize, depth);
        float diffIntensity = max(n_dot_l * s, 0.0);

        // specular lighting
        vec3 v = normalize(eyePos - P);
        vec3 r = reflect(-l, n);
        float r_dot_v = max(dot(r, v), 0.0);
        float spec = specIntensity * pow(r_dot_v, specPower) * n_dot_l * s;

        // put everything together
        _color = vec4(vec3(spec, spec, spec) + (diffIntensity+ambientIntensity)*color, 1.0);
    }
    else {
        // surface points away from light
        _color = vec4(color * ambientIntensity, 1.0);
    }
    _color = gamma(_color);
}
@end

@program ColorShader colorVS colorFS
@program ColorShaderInstanced colorVSInstanced colorFS

