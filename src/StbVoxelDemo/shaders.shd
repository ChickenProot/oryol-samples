//------------------------------------------------------------------------------
//  shaders.shd
//  Draw voxel meshes generated by stb_voxel_render
//------------------------------------------------------------------------------

@vs vs
uniform vsParams {
    mat4 mvp;
    mat4 model;
    vec4 normal_table[6];
    vec4 color_table[32];
    vec3 light_dir;
    vec3 scale;
    vec3 translate;
    vec3 tex_translate;
};

in vec4 position;
in vec4 normal;
out float amb_occ;
out vec3 color;

void main() {
    // manually extract position and normal into range 0..255
    vec4 p = position * 255.0;
    vec4 n = normal * 255.0;
    vec4 facedata = n.xyzw;

    vec3 offset = p.xzy;
    amb_occ  = p.w / 63.0;
    vec3 voxelspace_pos = offset * scale.xzy;

    int normal_index = int(mod(n.w / 4.0, 6.0));
    vec3 face_normal = vec4(model * normal_table[normal_index]).xzy;
    float l = clamp(dot(face_normal, light_dir), 0.0, 1.0) + 0.4;
    int color_index = int(mod(facedata.z, 32.0));
    color = color_table[color_index].xyz * l;

    vec4 wp = vec4(voxelspace_pos + translate.xzy, 1.0);
    gl_Position = mvp * wp;
}
@end

@fs fs
in vec3 color;
in float amb_occ;
out vec4 fragColor;
void main() {
    fragColor = vec4(color * amb_occ, 1.0);
}
@end

@program Shader vs fs
